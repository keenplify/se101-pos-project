import Head from "next/head";
import {
  Container,
  Row,
  Col,
  Form,
  FormControl,
  Button,
  InputGroup,
  Table,
  Badge,
} from "react-bootstrap";
import { NavBar } from "../../components/navbar";
import View from "../../components/view";
import Delete from "../../components/delete";
import Edit from "../../components/edit";
import AddProduct from "../../components/addItem";
import { Footer } from "../../components/footer";
import { AiOutlineSearch } from "react-icons/ai";
import { AuthenticateEmployee } from "../../helpers/AuthenticateEmployee";
import { CategoriesQueries } from "../../queries/categories";
import { BACKEND } from "../../helpers";
import { ChangeableImage } from "../../components/ChangeableImage";
import DeleteProduct from "../../components/delete";
import EditProduct from "../../components/edit";
import EditCategory from "../../components/editCategory";
import DeleteCategory from "../../components/deleteCategory";
import { Fragment, useEffect, useState } from "react";
import { useDebounce } from "use-debounce";
import { ProductsQueries } from "../../queries/products";

export default function ProductsViewer({ employee, category, token }) {
  const [keyword, setKeyword] = useState("");
  const [products, setProducts] = useState(category.products); // Use SSRed data as products default
  const [debouncedKeyword] = useDebounce(keyword, 1000); // Wait 1000 before searching (debounced search)

  useEffect(() => {
    console.log("debounced")
    if (debouncedKeyword.length > 0) {
      //Get data from search then set it as products state
      ProductsQueries.searchByCategory(token, category.id, {
        keyword: debouncedKeyword,
      }).then((res) => {
        if (res.data?.products) {
          setProducts(res.data.products);
        }
      });
    } else {
      // If no keyword is typed, show original SSRed data
      setProducts(category.products);
    }
  }, [debouncedKeyword]);

  return (
    <div>
      <Head>
        <title>{category.name} - POS Website</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/img/Logo.jpg" />
      </Head>
      <NavBar employee={employee} token={token}></NavBar>

      <Container className="col-lg-12 my-3 rounded-3">
        <Row>
          <Col md={3}>
            <ChangeableImage
              token={token}
              employee={employee}
              query={CategoriesQueries.changeImage}
              selectorId={category.id}
              image={category?.image?.location}
            />
          </Col>
          <Col className="mt-2">
            <div
              class="d-flex mt-3"
              style={{ width: "100%", alignSelf: "center" }}
            >
              <label
                className="text-center"
                style={{
                  fontSize: "2em",
                  fontWeight: "bold",
                  marginRight: "auto",
                }}
              >
                {category.name}
              </label>
              <div class="d-flex flex-column">
                {employee.type === "ADMIN" && (
                  <Fragment>
                    <EditCategory token={token} category={category} />
                    <DeleteCategory token={token} category={category} />
                  </Fragment>
                )}
              </div>
            </div>
            <p>{category.description}</p>
          </Col>
        </Row>
        <hr />
        <Row>
          <Col>
            <div className="d-flex col-lg-10  p-2">
              <InputGroup className="mb-3">
                <InputGroup.Text id="basic-addon1">
                  <AiOutlineSearch></AiOutlineSearch>
                </InputGroup.Text>
                <FormControl
                  placeholder="Search"
                  aria-label="Search"
                  type="search"
                  value={keyword}
                  onChange={(e) => setKeyword(e.target.value)}
                />
              </InputGroup>
            </div>
          </Col>

          <Col className="p-2">
            {employee.type === "ADMIN" && (
              <div className="text-end">
                <AddProduct token={token} category={category}></AddProduct>
              </div>
            )}
          </Col>
        </Row>

        <Table striped bordered hover className="table table-image">
          <thead>
            <tr>
              <th scope="col">ID</th>
              <th scope="col">Image</th>
              <th scope="col">Product Name</th>
              <th scope="col">Variants</th>
              <th scope="col">Date Added</th>
              {employee.type === "ADMIN" && <th scope="col">Action</th>}
            </tr>
          </thead>
          <tbody>
            {products.map((product, key) => (
              <tr key={key}>
                <th scope="row">{product.id}</th>
                <td className="w-25">
                  <img
                    src={
                      product?.variants[0] &&
                      product.variants[0].image?.location
                        ? BACKEND + product.variants[0].image.location
                        : "/img/blank.png"
                    }
                    className="img-fluid rounded bg-white"
                    style={{
                      width: "7em",
                      height: "7em",
                      maxHeight: "7em",
                      maxWidth: "7em",
                      objectFit: "contain",
                    }}
                    alt={product.name + "'s logo"}
                  />
                </td>
                <td>{product.name}</td>
                <td>
                  <ul>
                    {product.variants.map(
                      (variant, key) =>
                        key < 5 && <li key={key}> {variant.name}</li>
                    )}
                  </ul>
                </td>
                <td>{new Date(product.createdAt).toLocaleString()}</td>
                {employee.type === "ADMIN" && (
                  <td className="py-2">
                    <View
                      product={product}
                      token={token}
                      employee={employee}
                    ></View>
                    <EditProduct token={token} product={product} />
                    <DeleteProduct
                      token={token}
                      product={product}
                    ></DeleteProduct>
                  </td>
                )}
              </tr>
            ))}
          </tbody>
        </Table>
      </Container>

      <Footer></Footer>
    </div>
  );
}
export async function getServerSideProps(context) {
  const { props } = await AuthenticateEmployee(context);

  if (!props.employee) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  const category = (
    await CategoriesQueries.getById(props.token, context.query.categoryId)
  ).data;

  return {
    props: {
      ...props,
      category,
    },
  };
}
