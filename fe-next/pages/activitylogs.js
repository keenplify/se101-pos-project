import Head from "next/head";
import { Pagination, Table, InputGroup, FormControl } from "react-bootstrap";
import { AiOutlineSearch } from "react-icons/ai";
import { Container } from "react-bootstrap";
import { NavBar } from "../components/navbar";
import { Footer } from "../components/footer";
import { AuthenticateEmployee } from "../helpers/AuthenticateEmployee";
import { LogsQueries } from "../queries/logs";
import { useEffect, useState } from "react";

export default function activitylogs({ token, _logs, employee }) {
  const [logs, setLogs] = useState(_logs);
  const [pageCount] = useState(_logs.totalCount % 10);
  const [currentPageNumber, setCurrentPageNumber] = useState(1);

  return (
    <>
      <>
        <Head>
          <title>Vaperous M4ster - POS Website</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/img/Logo.jpg" />
        </Head>
        <NavBar employee={employee}></NavBar>

        <div
        className="mt-3 mb-2 text-center"
        style={{ width: "100%"}}
      >
        <label
          className="text-center "
          style={{
            fontSize: "30px",
            fontWeight: "bold",
            fontFamily: 'Roboto',
          }}
        >
         ACTIVITY LOGS{" "}
        </label>
          </div>
        <Container className="col-6 mb-3">
      <div className="d-flex p-1">
          <InputGroup >
            <InputGroup.Text id="basic-addon1">
              <AiOutlineSearch></AiOutlineSearch>
            </InputGroup.Text>
            <FormControl
              placeholder="Search"
              aria-label="Search"
              type="search"
            />
          </InputGroup>
          </div>
          </Container>
          
        <Container>
          <Table striped bordered hover variant="light">
            <thead>
              <tr>
                <th>ID</th>
                <th>DATE CREATED</th>
                <th>CREATED BY</th>
                <th>DESCRIPTION</th>
              </tr>
            </thead>
            <tbody>
              {logs.edges.map((edge, key) => (
                <tr key={key}>
                  <td>{edge.node.id}</td>
                  <td>{new Date(edge.node.createdAt).toLocaleString()}</td>
                  <td>
                    {edge.node.employee.firstName} {edge.node.employee.lastName}
                  </td>
                  <td>{edge.node.description}</td>
                </tr>
              ))}
            </tbody>
          </Table>
          <Pagination class="d-flex justify-content-center text-decoration-none list-unstyled">
            <Pagination.Prev
              onClick={() => {
                if (currentPageNumber == 1 && !logs.pageInfo.hasPreviousPage) return;

                LogsQueries.getAllPaginate(token, 10, {
                  before: logs.pageInfo.startCursor,
                })
                  .then((res) => {
                    setLogs(res.data.logs);
                    setCurrentPageNumber(currentPageNumber - 1);
                  })
                  .catch((err) => console.log(err.response));

              }}
            />
            {Array.from(Array(pageCount)).map((_, key) => (
              <Pagination.Item
                key={key}
                active={
                  Number.parseInt(currentPageNumber) == Number.parseInt(key + 1)
                }
              >
                {key + 1}
              </Pagination.Item>
            ))}
            <Pagination.Next
              onClick={() => {
                if (currentPageNumber == pageCount && !logs.pageInfo.hasNextPage) return;

                LogsQueries.getAllPaginate(token, 10, {
                  after: logs.pageInfo.endCursor,
                })
                  .then((res) => {
                    setLogs(res.data.logs);
                    setCurrentPageNumber(currentPageNumber + 1);
                  })
                  .catch((err) => console.log(err.response));
              }}
            />
          </Pagination>
        </Container>
      </>
      <Footer></Footer>
    </>
  );
}

export async function getServerSideProps(context) {
  const employee = await AuthenticateEmployee(context);

  if (employee.props.token) {
    const data = (await LogsQueries.getAllPaginate(employee.props.token, 10))
      .data;

    return {
      props: {
        ...employee.props,
        _logs: data.logs,
      },
    };
  }

  return {
    props: {
      ...employee.props,
    },
  };
}
